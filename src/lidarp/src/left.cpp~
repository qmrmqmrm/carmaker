#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

#include <pcl/sample_consensus/model_types.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/filters/extract_indices.h>//aaaaaaaaaaa



ros::Publisher pcl_pub, ind_pub, coef_pub;

void
cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input)
{
    // Convert the sensor_msgs/PointCloud2 data to pcl/PointCloud
    pcl::PointCloud<pcl::PointXYZ> cloud;
    pcl::PointCloud<pcl::PointXYZ> cloud_segmented;//aaaaaaaaaaa
    pcl::fromROSMsg (*input, cloud_segmented);
	ros::NodeHandle nh;
	
	pcl_pub = nh.advertise<sensor_msgs::PointCloud2>("pcl_segmented",1);
	ind_pub = nh.advertise<pcl_msgs::PointIndices>("point_indices", 1);
	coef_pub = nh.advertise<pcl_msgs::ModelCoefficients>("planar_coef",1);

    pcl::ModelCoefficients coefficients;
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices());
    // Create the segmentation object
    pcl::SACSegmentation<pcl::PointXYZ> seg;
    // Optional
    seg.setOptimizeCoefficients (true);
    // Mandatory
    seg.setModelType (pcl::SACMODEL_PLANE);
    seg.setMethodType (pcl::SAC_RANSAC);
    seg.setDistanceThreshold (0.1);

    seg.setInputCloud (cloud_segmented.makeShared ());
    seg.segment (*inliers, coefficients);
	
    // Publish the model coefficients
    pcl_msgs::ModelCoefficients ros_coefficients;
    pcl_conversions::fromPCL(coefficients, ros_coefficients);
    coef_pub.publish(ros_coefficients);

	pcl_msgs::PointIndices ros_inliers;
    pcl_conversions::fromPCL(*inliers, ros_inliers);
    ind_pub.publish(ros_inliers);
    
    pcl::ExtractIndices<pcl::PointXYZ> extract;
    extract.setInputCloud(cloud_segmented.makeShared());
    extract.setIndices(inliers);
    extract.setNegative(true);
    extract.filter(cloud_segmented);
    
    sensor_msgs::PointCloud2 output;
    pcl::toROSMsg(cloud_segmented, output);
    pcl_pub.publish(output);
}

int
main (int argc, char** argv)
{
    // Initialize ROS
    ros::init (argc, argv, "my_pcl_tutorial");
    ros::NodeHandle nh;

    // Create a ROS subscriber for the input point cloud
    ros::Subscriber sub = nh.subscribe("points_left", 1, cloud_cb);

    // Spin
    ros::spin ();
}
