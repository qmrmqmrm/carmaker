#include <ros/ros.h>
 	#include <sensor_msgs/PointCloud2.h>
 	 
 	#include <message_filters/subscriber.h>
 	#include <message_filters/synchronizer.h>
 	#include <message_filters/sync_policies/approximate_time.h>
 	 
 	#include <pcl_conversions/pcl_conversions.h>
 	#include <pcl/point_cloud.h>
 	#include <pcl/point_types.h>
 	#include <pcl/common/transforms.h>
 	 
 	#include <math.h>
 	 
 	using namespace message_filters;
 	using namespace sensor_msgs;
 	 
 	ros::Publisher Cal_F_pc_pub;
 	ros::Publisher Cal_R_pc_pub;
 	ros::Publisher Cal_L_pc_pub;
 	ros::Publisher Combine_pc_pub;
 	 
/* 	Eigen::Matrix4f cooridnate_transfrom = Eigen::Matrix4f::Identity();
 	Eigen::Matrix4f R_cooridnate_transfrom = Eigen::Matrix4f::Identity();
 	Eigen::Matrix4f L_cooridnate_transfrom = Eigen::Matrix4f::Identity();*/
 	 
 	pcl::PointCloud<pcl::PointXYZI> x_coordinate_filter(const pcl::PointCloud<pcl::PointXYZI> origin_pc) {
 	pcl::PointCloud<pcl::PointXYZI> x_filtered;
 	x_filtered.header.frame_id = "/VLP16_Front";
 	 
 	int cloudSize = origin_pc.points.size();
 	for (int i = 0 ; i < cloudSize ; i++) {
 	if(!std::isnan (origin_pc.points[i].x) && !std::isnan (origin_pc.points[i].y) && !std::isnan (origin_pc.points[i].z) && origin_pc.points[i].x > 0.1) { // point.x > 0 only
 	x_filtered.push_back(origin_pc.points[i]);
 	}
 	}
 	 
 	return x_filtered;
 	}
 	 
 	pcl::PointCloud<pcl::PointXYZI> pc_combine(const pcl::PointCloud<pcl::PointXYZI> Front, const pcl::PointCloud<pcl::PointXYZI> Right, const pcl::PointCloud<pcl::PointXYZI> Left) {
 	pcl::PointCloud<pcl::PointXYZI> combined_point;
 	combined_point.header.frame_id = "/VLP16_Front";
 	 
 	int cloudSize = Front.points.size();
 	for (int i = 0 ; i < cloudSize ; i++) {
 	if(!std::isnan (Front.points[i].x) && !std::isnan (Front.points[i].y) && !std::isnan (Front.points[i].z)) {
 	combined_point.push_back(Front.points[i]);
 	}
 	}
 	 
 	cloudSize = Right.points.size();
 	for (int i = 0 ; i < cloudSize ; i++) {
 	if(!std::isnan (Right.points[i].x) && !std::isnan (Right.points[i].y) && !std::isnan (Right.points[i].z)) {
 	combined_point.push_back(Right.points[i]);
 	}
 	}
 	 
 	cloudSize = Left.points.size();
 	for (int i = 0 ; i < cloudSize ; i++) {
 	if(!std::isnan (Left.points[i].x) && !std::isnan (Left.points[i].y) && !std::isnan (Left.points[i].z)) {
 	combined_point.push_back(Left.points[i]);
 	}
 	}
 	 
 	return combined_point;
 	}
 	 
 	void callback(const PointCloud2ConstPtr& F_pc, const PointCloud2ConstPtr& R_pc, const PointCloud2ConstPtr& L_pc) {
 	pcl::PointCloud<pcl::PointXYZI> F_cal;
 	pcl::PointCloud<pcl::PointXYZI> R_cal;
 	pcl::PointCloud<pcl::PointXYZI> L_cal;
 	 
 	pcl::fromROSMsg(*F_pc, F_cal);
 	pcl::fromROSMsg(*R_pc, R_cal);
 	pcl::fromROSMsg(*L_pc, L_cal);
 	 
 	// 0 < point_x
 	//F_cal = x_coordinate_filter(F_cal);
 	//R_cal = x_coordinate_filter(R_cal);
 	//L_cal = x_coordinate_filter(L_cal);
 	 
 	// Transform the cloud into the correct cordinate system for cam model to be applied later
 //	pcl::transformPointCloud(R_cal, R_cal, R_cooridnate_transfrom);
 //	pcl::transformPointCloud(L_cal, L_cal, L_cooridnate_transfrom);
 	 
 	// Point cloud combine
 	pcl::PointCloud<pcl::PointXYZI> combine_point_cloud;
 	combine_point_cloud = pc_combine(F_cal, R_cal, L_cal);
/* 	 
 	sensor_msgs::PointCloud2 F_calib;
 	pcl::toROSMsg(F_cal, F_calib);
 	F_calib.header.stamp = F_pc->header.stamp;
 	Cal_F_pc_pub.publish(F_calib);
 	 
 	sensor_msgs::PointCloud2 R_calib;
 	pcl::toROSMsg(R_cal, R_calib);
 	R_calib.header.stamp = R_pc->header.stamp;
 	Cal_R_pc_pub.publish (R_calib);
 	 
 	sensor_msgs::PointCloud2 L_calib;
 	pcl::toROSMsg(L_cal, L_calib);
 	L_calib.header.stamp = L_pc->header.stamp;
 	Cal_L_pc_pub.publish (L_calib);*/
 	 
 	sensor_msgs::PointCloud2 Comb;
 	pcl::toROSMsg(combine_point_cloud, Comb);
 	Comb.header.stamp = L_pc->header.stamp;
 	Combine_pc_pub.publish (Comb);
 	}
 	 
 	int main(int argc, char** argv) {
 	// Initialize ROS
 	ros::init (argc, argv, "velo_cal");
 	ros::NodeHandle nh;
 	 
 	// Create a ROS publisher for the output point cloud
 	Cal_F_pc_pub = nh.advertise<sensor_msgs::PointCloud2> ("Calib_Front_velo", 1);
 	Cal_R_pc_pub = nh.advertise<sensor_msgs::PointCloud2> ("Calib_Right_velo", 1);
 	Cal_L_pc_pub = nh.advertise<sensor_msgs::PointCloud2> ("Calib_Left_velo", 1);
 	Combine_pc_pub = nh.advertise<sensor_msgs::PointCloud2> ("Combined_velo", 1);
 	 
 	// Create a ROS subscriber for the input point cloud
 	Subscriber<PointCloud2> F_pc_sub(nh, "/points_front", 1);
 	Subscriber<PointCloud2> R_pc_sub(nh, "/right_velodyne_points_rotated", 1);
 	Subscriber<PointCloud2> L_pc_sub(nh, "/left_velodyne_points_rotated", 1);
 	 
 	typedef sync_policies::ApproximateTime<PointCloud2, PointCloud2, PointCloud2> SyncPolicy;
 	Synchronizer<SyncPolicy> sync(SyncPolicy(10), F_pc_sub, R_pc_sub, L_pc_sub);
 	sync.registerCallback(boost::bind(&callback, _1, _2, _3));
 	
 	ros::spin ();
 	} 	 
 	// Rotation
/* 	R_cooridnate_transfrom << 0.686155, -0.706304, 0.0253142, 0.04338,
    				0.706604, 0.685845, 0.0148543, 0.94482,
    				0.00787726,0.0282738,0.998896,0.25208,
    				0,0,0,1;*/
/* 	R_cooridnate_transfrom(0,0) = 1.000;
 	R_cooridnate_transfrom(0,1) = -0.008;
 	R_cooridnate_transfrom(0,2) = 0.015;
 	R_cooridnate_transfrom(1,0) = 0.008;
 	R_cooridnate_transfrom(1,1) = 1.000;
 	R_cooridnate_transfrom(1,2) = 0.006;
 	R_cooridnate_transfrom(2,0) = -0.015;
 	R_cooridnate_transfrom(2,1) = -0.006;
 	// Translate
 	R_cooridnate_transfrom(0,3) = -0.404;
 	R_cooridnate_transfrom(1,3) = -0.974;
 	//R_cooridnate_transfrom(2,3) = 0.523;
 	 
 	R_cooridnate_transfrom = R_cooridnate_transfrom * cooridnate_transfrom;
 	R_cooridnate_transfrom(0,3) = R_cooridnate_transfrom(0,3) - 0.454;
 	R_cooridnate_transfrom(1,3) = R_cooridnate_transfrom(1,3) + 0.434;
*/ 	 
 	// Rotation
 /*	L_cooridnate_transfrom << 0.723518, 0.680757, -0.0462027, -0.79437,
    				-0.681641, 0.724179, 0.00851417, 0.886662,
    				0.0208478,0.0421016,0.998896,0.183407,
    				0,0,0,1;*/
/* 	L_cooridnate_transfrom(0,0) = 0.999;
 	L_cooridnate_transfrom(0,1) = 0.042;
 	L_cooridnate_transfrom(0,2) = 0.006;
 	L_cooridnate_transfrom(1,0) = -0.042;
 	L_cooridnate_transfrom(1,1) = 0.999;
 	L_cooridnate_transfrom(1,2) = -0.016;
 	L_cooridnate_transfrom(2,0) = -0.007;
 	L_cooridnate_transfrom(2,1) = 0.016;
 	// Translate
 	L_cooridnate_transfrom(0,3) = -0.675;
 	L_cooridnate_transfrom(1,3) = 1.022;
 	//L_cooridnate_transfrom(2,3) = 0.277;
 	 
 	L_cooridnate_transfrom = L_cooridnate_transfrom * cooridnate_transfrom;
 	L_cooridnate_transfrom(0,3) = L_cooridnate_transfrom(0,3) + 0.055;
 	L_cooridnate_transfrom(1,3) = L_cooridnate_transfrom(1,3) - 0.522;
 	 */
 	// Spin

