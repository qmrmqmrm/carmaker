#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl/io/pcd_io.h>    
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>

ros::Publisher pub;
/*
void points_callback(const sensor_msgs::PointCloud2ConstPtr &msg){
 	//sensor_msgs::PointCloud2 response
 	//PointCloud2ConstPtr.fields[3].name = "intensity";
    pcl::PointCloud<pcl::PointXYZI>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZI>);
    pcl::fromROSMsg(*msg,*cloud);    

    pub.publish(cloud);    
}

int main(int argc, char** argv)
{
    ros::init(argc,argv,"ugv_plane_node");
    ros::NodeHandle nh;
    ros::NodeHandle p_nh("~");

    ros::Subscriber sub;
    sub = nh.subscribe<sensor_msgs::PointCloud2>("points_front",50,points_callback);
    pub = nh.advertise<sensor_msgs::PointCloud2>("plane_points",50);
    
    ros::spin();

}*/

//출처: https://ahshinyong.tistory.com/entry/pclPointCloudsensormsgsPointCloud2 [while(1)]
/*
void callback(const sensor_msgs::PointCloudConstPtr &msg)
{
	sensor_msgs::PointCloud2 response = response.cloud;
	response.fields[3].name = "intensity";
	pcl::PointCloud<pcl::PointXYZI> response_pcl;
	pcl::fromROSMsg(response, response_pcl);
	pub.publish(response_pcl);
}

int main(int argc, char** argv)
{
    ros::init(argc,argv,"ugv_plane_node");
    ros::NodeHandle nh;
    ros::NodeHandle p_nh("~");

    ros::Subscriber sub;
    sub = nh.subscribe<sensor_msgs::PointCloud2>("points_front",50,callback);
    pub = nh.advertise<sensor_msgs::PointCloud2>("plane_points",50);
    
    ros::spin();


}*/
/*
void points_callback(const sensor_msgs::PointCloud2 msg){
 	//sensor_msgs::PointCloud2 response
 	//PointCloud2ConstPtr.fields[3].name = "intensity";
	msg.fields[1].name = "intensity";
	pcl::PointCloud<pcl::PointXYZI> cloud;
    pcl::fromROSMsg(msg, cloud);    

    pub.publish(cloud);    
}

int main(int argc, char** argv)
{
    ros::init(argc,argv,"ugv_plane_node");
    ros::NodeHandle nh;
    ros::NodeHandle p_nh("~");

    ros::Subscriber sub;
    sub = nh.subscribe<sensor_msgs::PointCloud2>("points_front",50,points_callback);
    pub = nh.advertise<sensor_msgs::PointCloud2>("plane_points",50);
    
    ros::spin();

}
